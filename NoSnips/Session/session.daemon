#!/bin/bash -vx
#
# Session manager for NoSnips replacement service.
# Usage:
#     session.daemon path/to/nosnips.toml
#
# https://github.com/dbohdan/remarshal is used for reading toml
# jq is used for parsing JSON
#

# set config path:
#
if [[ $# -lt 1 ]] ; then
  CONFIG="/etc/nosnips.toml"
else
  CONFIG=$1
fi

# parse config from toml:
#
TOML="$(cat $CONFIG | toml2json)"

PUBLISH="$(echo $J | jq '.mqtt.publish')"
SUBSRIBE="$(echo $J | jq '.mqtt.subsrcibe')"
MQTT_PORT="$(echo $J | jq '.mqtt.port')"
MQTT_HOST="$(echo $J | jq '.mqtt.host')"

BASE_DIR="$(echo $J | jq '.local.base_directory')"
TIMEOUT="$(echo $J | jq '.hotword.session_timeout')"

# Topics to listen to:
#
TOPIC_HOTWORD="hermes/hotword/default/detected"
TOPIC_API="hermes/dialogueManager/startSession"

TOPIC_END="hermes/dialogueManager/endSession"
TOPIC_CONTINUE="hermes/dialogueManager/continueSession"

SESSION_FILE="session.running"

while true ; do

  # wait for a session start MQTT
  #
  REC=$($SUBSRIBE -C 1 -t $TOPIC_HOTWORD -t $TOPIC_API -v)
  TOPIC=$(echo "$REC" | sed 's/ {.*$//')
  JSON=$(echo "$REC" | sed 's/^.*? {/{/')

  # if hotword or strat session, start a new session:
  #
  DO="ignore"
  if [[ $TOPIC == $TOPIC_HOTWORD ]] ; then
    DO="action"
    TRIGGERED_BY="hotword detected"

  elif [[ $TOPIC == $TOPIC_API ]] ; then
    TRIGGERED_BY="start session API call"
    TYPE="$(echo $JSON | jq '.init.type')"

    if [[ $TYPE == "action" ]] ; then
      DO="action"
    else
      DO="notification"
    fi
  fi

  if [[ $DO == "action" ]] ; then

    SESSION_ID="$(uuidgen)"
    SITE_ID="$(echo $JSON | jq '.siteId')"

    # construct MQTT message for session started
    #
    TOPIC="hermes/dialogueManager/sessionStarted"
    PAYLOAD="{
      \"sessionId\": \"$SESSION_ID\",
      \"siteId\": \"$SITE_ID\",
      \"customData\": \"Session started because of $TRIGGERED_BY\"
    }"

    # start the new session:
    #
    START_TIME=$(date +"%s")
    echo $START_TIME > SESSION_FILE
    $PUBLISH -h $MQTT_HOST -p $MQTT_PORT -t $TOPIC -m $PAYLOAD

    # run the session until session end message:
    #
    DO_SESSION="run"
    while [[ $DO_SESSION == "run" ]] ; do

      REC=$($SUBSRIBE -C 1 -t $TOPIC_END -t $TOPIC_CONTINUE -v)
      TOPIC=$(echo "$REC" | sed 's/ {.*$//')
      JSON=$(echo "$REC" | sed 's/^.*? {/{/')

      if [[ $TOPIC == $TOPIC_END ]] ; then
        DO_SESSION="end"

      else
        CONT_TIME=$(date +"%s")
        echo $CONT_TIME > SESSION_FILE
      fi
    done
  #
  # end action
elif [[ $DO == "notification" ]] ; then

  SESSION_ID="$(uuidgen)"
  SITE_ID="$(echo $JSON | jq '.siteId')"


  bessere logic: nur say bei notifiation in temprärer session.
  eigene scripts für say-only und action-session
